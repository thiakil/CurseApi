apply plugin: 'java'

def versionPropsFile = file('version.properties')
def versionBuild

/*Setting default value for versionBuild which is the last incremented value stored in the file */
if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    def strm = new FileInputStream(versionPropsFile)
    versionProps.load(strm)
    strm.close()
    versionBuild = versionProps['VERSION_BUILD']
} else {
    versionBuild = "HOMEBAKED"
}

group = "com.thiakil"
version = "1.0.${versionBuild}"

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "org.apache.axis2:axis2-kernel:1.7.7"
    compile "org.apache.axis2:axis2-adb:1.7.7"
    compile ("org.apache.axis2:axis2-transport-http:1.7.7"){
        exclude group: "commons-httpclient", module:"commons-httpclient"
    }
    compile "org.apache.axis2:axis2-transport-local:1.7.7"
    compile "org.apache.axis2:addressing:1.7.7"
    compile "org.apache.axis2:axis2-jaxws:1.7.7"
    //compile "com.sangupta:murmur:1.0.0"
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.github.scribejava:scribejava-core:5.2.0-java7again'
    compile 'com.github.scribejava:scribejava-httpclient-apache:5.2.0-java7again'
    compile 'org.apache.httpcomponents:httpclient-cache:4.5.4'
    compile "org.apache.commons:commons-compress:1.16.1"
    compile 'it.unimi.dsi:fastutil:8.1.1'
}

configurations{
    all*.exclude group: "commons-httpclient", module:"commons-httpclient"
}


sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

uploadArchives {
    if(project.hasProperty('mavenDestination')) {
        repositories {
            mavenDeployer {
                /*if (System.getenv("SIGN_KEYSTORE") != null){
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }*/
                repository(url: project.mavenDestination)
                pom {
                    groupId = project.group
                    version = project.version
                    if (System.getenv("MAVEN_ARTIFACT") != null) {
                        artifactId = System.getenv("MAVEN_ARTIFACT")
                    } else {
                        artifactId = project.archivesBaseName
                    }
                    project {
                        name rootProject.name
                        packaging 'jar'
                        description 'Curse Soap API & Project Feed implementation'
                        url 'https://github.com/thiakil/CurseApi'
                        scm {
                            url 'https://github.com/thiakil/CurseApi.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/thiakil/CurseApi/issues'
                        }
                        licenses {
                            license {
                                name 'GPLv3'
                                url 'https://github.com/thiakil/CurseApi/blob/master/LICENSE'
                                distribution 'repo'
                            }
                        }
                    }
                }
            }
        }
    }
}

jar.doLast {
    if (project.hasProperty('signKeystore')){
        def keyStore=project.signKeystore
        def alias="signFiles"
        def storePass=project.signStorePass
        def keyPass=project.signKeyPass

        println("Signing jar")

        jar.outputs.files.each {
            ant.signjar(
                    'alias': alias,
                    'jar': it,
                    keystore: keyStore,
                    storepass: storePass,
                    keypass: keyPass
            )
        }

    }
}

task incrementBuildNumber(group: "Build") {
    doLast {
        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
            versionProps['VERSION_BUILD'] = versionBuild.toString()
            def writer = versionPropsFile.newWriter()
            versionProps.store(writer, null)
            writer.close()
            project.version = "1.0.${versionBuild}"
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }
}
